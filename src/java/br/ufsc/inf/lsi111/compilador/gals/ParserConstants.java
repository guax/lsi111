package br.ufsc.inf.lsi111.compilador.gals;

public interface ParserConstants {
	int START_SYMBOL = 59;

	int FIRST_NON_TERMINAL = 59;
	int FIRST_SEMANTIC_ACTION = 92;

	int[][] PARSER_TABLE = {
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1,
					-1, -1, -1, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, 36, 39, -1, 33, 39, -1, -1, 34, -1, 39, 37, 38, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 19, 20, 20, 20, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, 79, 78, 82, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, 80, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1,
					-1, -1, -1, 3, 3, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 8, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, 6, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1,
					-1, -1, -1, 5, 5, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
					-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1 },
			{ -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, 48, -1, -1, -1,
					-1, -1, -1, -1, -1, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, 57, -1, -1, -1,
					-1, -1, -1, -1, -1, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, 70, -1, -1, -1,
					-1, -1, -1, -1, -1, 72, 73, 73, 73, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					69, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, 12, 13, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 67, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, 53, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, 56, 55, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 11, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, 11,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 45, -1, -1, -1, -1, -1, 44, -1, 43, -1, -1, -1, -1, -1, -1,
					42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, 45, -1, -1, 45, -1, -1, -1, -1, 45, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, 46, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 59, 59, -1, 59, 59, 59, -1, 59, -1, 59, 58, 58, -1, -1, -1,
					-1, -1, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, 59, -1, -1, 59, -1, -1, -1, 59, 59, -1, -1, 58, -1,
					-1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, 17, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, 18,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 14, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 65, 65, -1, 65, 65, 65, -1, 65, -1, 65, 65, 65, 64, 64, -1,
					-1, -1, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, 65, -1, -1, 65, -1, -1, -1, 65, 65, -1, -1, 65, 64,
					-1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 50, 50, -1, 49, 49, 49, -1, 50, -1, 50, -1, -1, -1, -1, -1,
					-1, -1, 49, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, 50, -1, -1, 50, -1, -1, -1, 50, 50, -1, -1, -1, -1,
					-1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 77, 77, -1, 77, 77, 77, 75, 77, 76, 77, 77, 77, 77, 77, -1,
					-1, -1, 77, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, 77, -1, -1, 77, -1, -1, -1, 77, 77, -1, -1, 77, 77,
					-1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, 41, -1, -1, 41, -1, -1, -1, -1, 40, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, 63, -1, -1, -1,
					-1, -1, -1, -1, -1, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 23,
					21, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 21, 24, -1, -1, -1, 22, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1,
					28, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
					-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 } };

	int[][] PRODUCTIONS = { { 68, 60, 4 }, { 64, 67, 66 },
			{ 58, 90, 22, 7, 62, 2, 64 }, { 0 }, { 29, 72, 16, 89, 2, 67 },
			{ 0 }, { 65, 2, 66 }, { 0 }, { 35, 22, 77, 2, 68, 60 },
			{ 39, 22, 77, 16, 90, 2, 68, 60 }, { 8, 73, 9 }, { 0 },
			{ 55, 72, 16, 90, 83 }, { 56, 72, 16, 90, 83 }, { 2, 73 }, { 0 },
			{ 22, 82 }, { 3, 22, 82 }, { 0 }, { 22 }, { 63 }, { 90 },
			{ 57, 62, 18, 62 }, { 31, 10, 62, 11 }, { 53, 10, 62, 11, 50, 90 },
			{ 38 }, { 52 }, { 30 }, { 32 }, { 36, 61, 79, 37 }, { 2, 61, 79 },
			{ 0 }, { 22, 78 }, { 36, 61, 79, 37 }, { 40, 69, 41, 61, 87 },
			{ 54, 69, 51, 61 }, { 33, 61, 34, 69 }, { 43, 8, 72, 9 },
			{ 44, 8, 69, 80, 9 }, { 0 }, { 42, 61 }, { 0 }, { 17, 69 },
			{ 10, 69, 11, 17, 69 }, { 8, 69, 80, 9 }, { 0 }, { 3, 69, 80 },
			{ 0 }, { 70, 85 }, { 76, 70 }, { 0 }, { 7 }, { 6 }, { 5 }, { 21 },
			{ 20 }, { 19 }, { 88, 81 }, { 74, 88, 81 }, { 0 }, { 12 }, { 13 },
			{ 45 }, { 71, 84 }, { 75, 71, 84 }, { 0 }, { 14 }, { 15 }, { 46 },
			{ 47, 71 }, { 13, 71 }, { 8, 69, 9 }, { 91 }, { 63 }, { 22, 86 },
			{ 8, 69, 80, 9 }, { 10, 69, 11 }, { 0 }, { 24 }, { 23 }, { 48 },
			{ 49 }, { 25 } };

	String[] PARSER_ERROR = {
			"",
			"Era esperado fim de programa",
			"Era esperado \";\"",
			"Era esperado \",\"",
			"Era esperado \".\"",
			"Era esperado \">\"",
			"Era esperado \"<\"",
			"Era esperado \"=\"",
			"Era esperado \"(\"",
			"Era esperado \")\"",
			"Era esperado \"[\"",
			"Era esperado \"]\"",
			"Era esperado \"+\"",
			"Era esperado \"-\"",
			"Era esperado \"*\"",
			"Era esperado \"/\"",
			"Era esperado \":\"",
			"Era esperado \":=\"",
			"Era esperado \"..\"",
			"Era esperado \"<>\"",
			"Era esperado \"<=\"",
			"Era esperado \">=\"",
			"Era esperado id",
			"Era esperado num_real",
			"Era esperado num_int",
			"Era esperado literal",
			"Era esperado comentlinha",
			"Era esperado comentbloco",
			"Era esperado programa",
			"Era esperado var",
			"Era esperado booleano",
			"Era esperado cadeia",
			"Era esperado caracter",
			"Era esperado repita",
			"Era esperado ate",
			"Era esperado proc",
			"Era esperado inicio",
			"Era esperado fim",
			"Era esperado inteiro",
			"Era esperado funcao",
			"Era esperado se",
			"Era esperado entao",
			"Era esperado senao",
			"Era esperado leia",
			"Era esperado escreva",
			"Era esperado ou",
			"Era esperado e",
			"Era esperado nao",
			"Era esperado falso",
			"Era esperado verdadeiro",
			"Era esperado de",
			"Era esperado faca",
			"Era esperado real",
			"Era esperado vetor",
			"Era esperado enquanto",
			"Era esperado ref",
			"Era esperado val",
			"Era esperado intervalo",
			"Era esperado const",
			"Era esperado: const, var, proc, inicio, funcao", // programa
			"Era esperado: inicio", // comandos
			"Era esperado: id, repita, inicio, se, leia, escreva, enquanto, ;, ate, fim, senao", // comando
			"Era esperado: id, num_real, num_int, falso, verdadeiro, literal", // constante
			"Era esperado: num_real, num_int, falso, verdadeiro, literal", // constante_explicita
			"Era esperado: const, var, proc, inicio, funcao", // dcl_const
			"Era esperado: proc, funcao", // dcl_proc
			"Era esperado: proc, funcao, inicio", // dcl_procs
			"Era esperado: var, proc, inicio, funcao", // dcl_var
			"Era esperado: const, var, proc, funcao, inicio", // declaracoes
			"Era esperado: (, -, id, num_real, num_int, nao, falso, verdadeiro, literal", // expressao
			"Era esperado: (, -, id, num_real, num_int, nao, falso, verdadeiro, literal", // expsimp
			"Era esperado: (, -, id, num_real, num_int, nao, falso, verdadeiro, literal", // fator
			"Era esperado: id", // lid
			"Era esperado: ref, val", // listapar
			"Era esperado: +, -, ou", // op_add
			"Era esperado: *, /, e", // op_mult
			"Era esperado: >, <, =, <>, <=, >=", // oprel
			"Era esperado: (, ;, :", // parametros
			"Era esperado: (, [, :=, ;, ate, fim, senao", // rcomid
			"Era esperado: ;, fim", // rep_comando
			"Era esperado: \",\",)", // rep_expressao
			"Era esperado: +, -, ou, ;, \",\", >, <, =, ), ], <>, <=, >=, ate, fim, entao, senao, faca", // rep_expsimp
			"Era esperado: \",\", ), :", // rep_id
			"Era esperado: ;,)", // rep_listapar
			"Era esperado: *, /, e, ;, \",\", >, <, =, ), ], +, -, <>, <=, >=, ate, fim, entao, senao, ou, faca", // rep_termo
			"Era esperado: >, <, =, <>, <=, >=, ;, \",\", ), ], ate, fim, entao, senao, faca", // resto_expressao
			"Era esperado: (, [, ;, \",\", >, <, =, ), ], +, -, *, /, <>, <=, >=, ate, fim, entao, senao, ou, e, faca", // rvar
			"Era esperado: senao", // senaoparte
			"Era esperado: (, -, id, num_real, num_int, nao, falso, verdadeiro, literal", // termo
			"Era esperado: booleano, cadeia, caracter, inteiro, real, vetor, intervalo", // tipo
			"Era esperado: booleano, caracter, inteiro, real", // tipo_pre_def
			"Era esperado: id" // variavel
	};
}
